///////////////////////////////////////////////////////////////////////////////
// vim:set shiftwidth=3 softtabstop=3 expandtab:
// $Id: bloom_filter 2008-03-13 gac1 $
//
// Module: bloom_filter.v
// Project: NF2.1
// Description: defines a module for the user data path
//
///////////////////////////////////////////////////////////////////////////////
`timescale 1ns/1ps

module bloom_filter
   #(
      parameter DATA_WIDTH = 64,
      parameter CTRL_WIDTH = DATA_WIDTH/8,
      parameter SRAM_ADDR_WIDTH = 18, //created
      parameter UDP_REG_SRC_WIDTH = 2
   )
   (
      input  [DATA_WIDTH-1:0]             in_data,
      input  [CTRL_WIDTH-1:0]             in_ctrl,
      input                               in_wr,
      output                              in_rdy,

      output [DATA_WIDTH-1:0]             out_data,
      output [CTRL_WIDTH-1:0]             out_ctrl,
      output                              out_wr,
      input                               out_rdy,

      output reg                          wr_1_req,
      output reg                          wr_0_req,
      output reg [SRAM_ADDR_WIDTH:0]      wr_0_addr,
      output reg [DATA_WIDTH-1:0]         wr_0_data,
      input                               wr_0_ack,

      output reg                          rd_1_req,
      output reg                          rd_0_req,
      output reg [SRAM_ADDR_WIDTH:0]      rd_0_addr,
      input [DATA_WIDTH-1:0]              rd_0_data,
      input                               rd_0_ack,
      input                               rd_0_vld,

      // --- Register interface
      input                               reg_req_in,
      input                               reg_ack_in,
      input                               reg_rd_wr_L_in,
      input  [`UDP_REG_ADDR_WIDTH-1:0]    reg_addr_in,
      input  [`CPCI_NF2_DATA_WIDTH-1:0]   reg_data_in,
      input  [UDP_REG_SRC_WIDTH-1:0]      reg_src_in,

      output                              reg_req_out,
      output                              reg_ack_out,
      output                              reg_rd_wr_L_out,
      output  [`UDP_REG_ADDR_WIDTH-1:0]   reg_addr_out,
      output  [`CPCI_NF2_DATA_WIDTH-1:0]  reg_data_out,
      output  [UDP_REG_SRC_WIDTH-1:0]     reg_src_out,

      // misc
      input                                reset,
      input                                clk
   );

   // Define the log2 function
   `LOG2_FUNC

   //------------------------- Signals-------------------------------

   wire [DATA_WIDTH-1:0]         in_fifo_data;
   wire [CTRL_WIDTH-1:0]         in_fifo_ctrl;

   wire                          in_fifo_nearly_full;
   wire                          in_fifo_empty;

   reg                           in_fifo_rd_en;
   reg                           out_wr_int;
   reg                           data_proc, ack_proc;

   reg                           data0,data1,data2,data3,data4,data5,data6;
   reg                           ack1,ack2,ack3,ack4,ack5,ack6;
   reg  [19-1:0]                 addr1,addr2,addr3,addr4,addr5,addr6;
   wire                          data_pkt, ack_pkt;

   wire [SRAM_ADDR_WIDTH:0]      hash0,hash1;
   wire [DATA_WIDTH-1:0]         wr_data_shuffled;
   //reg  [DATA_WIDTH-1:0]       read_data1;      

   reg  [16-1:0]                 timer; //lifetime
   reg  [4-1:0]                  bf; //marca bfilter atual

   //------------------------- Local assignments -------------------------------

   /*assign in_rdy     = !in_fifo_nearly_full;
   assign out_wr     = out_wr_int;*/
   /*assign out_data   = in_fifo_data;
   assign out_ctrl   = in_fifo_ctrl;*/

   //------------------------- Modules-------------------------------

   /*fallthrough_small_fifo #(
      .WIDTH(CTRL_WIDTH+DATA_WIDTH),
      .MAX_DEPTH_BITS(3)
   ) input_fifo (
      .din           ({in_ctrl, in_data}),   // Data in
      .wr_en         (in_wr),                // Write enable
      .rd_en         (in_fifo_rd_en),        // Read the next word
      .dout          ({in_fifo_ctrl, in_fifo_data}),
      .full          (),
      .nearly_full   (in_fifo_nearly_full),
      .prog_full     (),
      .empty         (in_fifo_empty),
      .reset         (reset),
      .clk           (clk)
   );*/

   simulacao #(
        .DATA_WIDTH(DATA_WIDTH),
        .CTRL_WIDTH(CTRL_WIDTH),
        .UDP_REG_SRC_WIDTH (UDP_REG_SRC_WIDTH),
        .SRAM_ADDR_WIDTH(10) //created
    ) simulacao (
        .out_data              (out_data),
        .out_ctrl              (out_ctrl),
        .out_wr                (out_wr),
        .out_rdy               (out_rdy),

        .in_data              (/*in_fifo_data*/in_data),
        .in_ctrl              (/*in_fifo_ctrl*/in_ctrl),
        .in_wr                (in_wr),
        .in_rdy               (in_rdy),

        .reg_req_in           (reg_req_in),
        .reg_ack_in           (reg_ack_in),
        .reg_rd_wr_L_in       (reg_rd_wr_L_in),
        .reg_addr_in          (reg_addr_in),
        .reg_data_in          (reg_data_in),
        .reg_src_in           (reg_src_in),

        .reg_req_out           (reg_req_out),
        .reg_ack_out           (reg_ack_out),
        .reg_rd_wr_L_out       (reg_rd_wr_L_out),
        .reg_addr_out          (reg_addr_out),
        .reg_data_out          (reg_data_out),
        .reg_src_out           (reg_src_out),

        .hash_0               (hash0),
        .hash_1               (hash1),
        .data_pkt             (data_pkt),
        .ack_pkt              (ack_pkt),
        .data_proc            (data_proc),
        .ack_proc             (ack_proc),

        .clk              (clk),
        .reset            (reset));




   //------------------------- Logic-------------------------------

   generate
      genvar i;
      for (i=0; i<16; i=i+1) begin:gen_sram_data
         //assign wr_data_shuffled[i*3 + 3 : i*3] = ((i+1)==bf)?(read_data1[i*3 + 3 : i*3]+1):read_data1[i*3 + 3 : i*3];
         assign wr_data_shuffled[i*3+2 : i*3] = (rd_0_data[i*3+2 : i*3]+1);
      end
   endgenerate


   /*always @(*) begin
      // Default values
      out_wr_int = 0;
      in_fifo_rd_en = 0;

      if (!in_fifo_empty && out_rdy) begin
         out_wr_int = 1;
         in_fifo_rd_en = 1;
      end
   end*/

   always @(posedge clk) begin
      if(reset) begin
         rd_0_req <= 0;
         {wr_0_req,wr_1_req} <= 2'b0;
         wr_0_addr <= 0;
         {data1,data2,data3,data4,data5,data6} <= 4'b0;
         {addr1,addr2,addr3,addr4} <= 4'b0;
         {ack1,ack2,ack3,ack4} <= 4'b0;
         {data_proc,ack_proc} <= 2'b0;
         //read_data1 <= 0;
         timer <= 1'b0;
         bf <= 1'b0;
      end
      else begin
         //first stage - rd_req in t1, sram rd req t2 -> t5, response comes in t6
         wr_1_req <= 1'b0;
         rd_1_req <= 1'b0;
         rd_0_req <= (data_pkt||ack_pkt);
         rd_0_addr <= hash0;
         if(data_pkt) begin
            $display("hash0: %x\n", hash0);
            //$display("hash1: %x\n", hash1);
         end
         data_proc <= data_pkt;
         ack_proc <= ack_pkt;
         {data6,ack6} <= {data_pkt,ack_pkt};
         addr6 <= hash0;

         //second stage 
         {data5,ack5} <= {data6,ack6};
         addr5 <= addr6;

         //third stage 
         {data4,ack4} <= {data5,ack5};
         addr4 <= addr5;

         //forth stage 
         {data3,ack3} <= {data4,ack4};
         addr3 <= addr4;

         //fifth stage 
         {data2,ack2} <= {data3,ack3};
         addr2 <= addr3;
         
         //sixth stage 
         {data1,ack1} <= {data2,ack2};
         addr1 <= addr2;
         //read_data1 <= (rd_0_data=='hxxxxxxxxxxxxxxxxxx)?0:rd_0_data;
         //$display("dataack: %h,%h,%h,%h,%h,%h\n",data1,data2,data3,data4,data5,data6);
         //read_data1 <= rd_0_data;
         if(rd_0_vld) begin
            $display("Dados_lidos: %h,d1: %h,d2: %h,d3: %h\n",rd_0_data,
                  data1,data2,data3);
         end
         /*if(data1) begin
            $display("datashuffled: %h\n",wr_data_shuffled);
         end*/
         

         //seventh stage 
         //if(!data0) begin
            wr_0_req <= data1;
            data0 <= data1;
            wr_0_addr <= addr1;
         //end
         //if(wr_0_ack) 
            data0 <= 0;
         wr_0_data <= {DATA_WIDTH{1'b1}};//'hdeadbeef;
         //wr_0_data <= wr_data_shuffled;
         
         if(timer >= 16'b1001001001111100) begin  
            bf <= bf+1'b1;
            timer <= 16'b0;
         end
         else begin
            timer <= timer +1'b1;
         end
         if(bf >= 16) 
            bf <= 0;
      end
   end
endmodule
